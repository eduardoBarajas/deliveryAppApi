#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('deliveryappapi:server');
var http = require('http');
const webSocketServer = require('websocket').server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
const wsServer = new webSocketServer({
  httpServer: server
});

wsServer.on('request', request => {
  request.accept(null, request.origin);
});

wsServer.on('connect', ws => {
  ws.on('message', data => {
    console.log(data);
    if (data.type === 'utf8') {
      try {
        let request_json = JSON.parse(data.utf8Data);
        let response = {type: request_json.type, data: undefined};
        switch (request_json.type.toUpperCase()) {
          case 'STORE_UPDATED': {
            response.data = 'Se actualizo una tienda.';
            break;
          }
          case 'PRODUCT_UPDATED': {
            response.data = 'Se actualizo un producto.';
            break;
          }
          case 'ORDER_UPDATED': {
            response.data = 'Se actualizo una orden.';
            break;
          }
        }
        if (response.data != undefined) {
          wsServer.broadcastUTF(JSON.stringify(response));
        }
      } catch(e) { console.log(e) }
    }
  });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
